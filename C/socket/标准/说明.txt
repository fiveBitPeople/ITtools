# 项目使用说明书

## 1. 项目概述

本项目是一个基于C语言的多线程客户端-服务器应用程序，支持自定义处理函数、日志记录、网络通信和心跳机制。服务器可以处理客户端请求，并根据请求ID调用相应的处理函数。客户端可以发送请求并接收服务器的响应。项目还包含日志模块、网络模块和测试脚本，方便调试和性能测试。

---

## 2. 项目结构

```
project/
├── include/              # 头文件目录
│   ├── common.h          # 公共定义和结构体
│   ├── functions.h       # 处理函数相关定义
│   ├── log.h             # 日志模块定义
│   └── network.h         # 网络模块定义
├── src/                  # 源代码目录
│   ├── server.c          # 服务端代码
│   ├── client.c          # 客户端代码
│   ├── functions.c       # 处理函数实现
│   ├── log.c             # 日志模块实现
│   └── network.c         # 网络模块实现
├── logs/                 # 日志文件目录
│   ├── log1.log          # 日志文件
│   ├── log2.log          # 日志文件
│   ├── ...               # 其他日志文件
├── test.sh               # 测试脚本
└── Makefile              # 编译配置文件
```

---

## 3. 编译与运行

### 3.1 编译项目

使用 `Makefile` 编译项目：

```bash
make
```

编译完成后会生成两个可执行文件：
- `server`：服务端程序
- `client`：客户端程序

### 3.2 清理编译文件

清理编译生成的文件：

```bash
make clean
```

---

## 4. 添加自定义处理函数

### 4.1 定义处理函数

处理函数的签名如下：

```c
void custom_handler(const char *input, char *output, uint32_t *length);
```

- `input`：客户端发送的输入数据。
- `output`：处理后的输出数据。
- `length`：输出数据的长度。

### 4.2 注册处理函数

在 `src/functions.c` 中，使用 `register_function` 函数注册自定义处理函数。例如：

```c
void custom_handler(const char *input, char *output, uint32_t *length) {
    // 自定义处理逻辑
    snprintf(output, MAX_DATA_SIZE, "Processed: %s", input);
    *length = strlen(output);
}

// 在 init_default_functions 中注册
void init_default_functions() {
    register_function(1, str_reverse); // ID 1：字符串反转
    register_function(2, str_upper);   // ID 2：字符串转大写
    register_function(6, custom_handler); // ID 6：自定义处理函数
}
```

### 4.3 重新编译

修改后重新编译项目：

```bash
make
```

---

## 5. 运行服务端和客户端

### 5.1 启动服务端

```bash
./server
```

服务端会监听 `127.0.0.1:8888`，并等待客户端连接。

### 5.2 启动客户端

客户端需要指定处理函数ID和输入数据。例如：

```bash
./client 1 "hello"
```

- `1`：处理函数ID（对应字符串反转）。
- `"hello"`：输入数据。

客户端会输出服务器的响应和耗时。

---

## 6. 测试脚本

### 6.1 运行测试脚本

测试脚本 `test.sh` 会自动启动服务端并运行一系列测试用例。运行测试脚本：

```bash
./test.sh
```

### 6.2 测试用例

测试脚本包含以下测试用例：

| ID  | 输入     | 预期输出       | 描述               |
|-----|----------|----------------|--------------------|
| 1   | hello    | olleh          | 字符串反转         |
| 2   | hello    | HELLO          | 字符串转大写       |
| 3   | HELLO    | hello          | 字符串转小写       |
| 4   | hello    | 5              | 计算字符串长度     |
| 5   | hello    | hello_hello    | 字符串拼接         |
| 6   | invalid  | 无效的ID       | 测试无效ID的处理   |

### 6.3 测试结果

测试脚本会输出以下统计信息：
- 总测试次数
- 失败测试次数
- 响应时间超过 1ms 的测试次数
- 错误率

---

## 7. 日志模块

### 7.1 日志文件

日志文件存储在 `logs/` 目录下，文件名格式为 `log1.log`、`log2.log` 等。每个日志文件的最大大小为 2MB，超过后会轮转。

### 7.2 日志级别

支持两种日志级别：
- `INFO`：记录一般信息。
- `ERROR`：记录错误信息。

### 7.3 日志格式

日志格式如下：

```
[时间戳] [日志级别] [进程ID] [文件名:行号] 日志内容
```

---

##8 . 功能特点

###8.1 多线程支持
特点：服务端采用多线程模型，每个客户端连接由独立的线程处理，确保高并发和低延迟。
优势：
支持同时处理多个客户端请求。
线程之间互不干扰，提升系统稳定性。

###8.2 动态函数注册
特点：支持动态注册处理函数，用户可以根据需求添加自定义处理逻辑。
优势：
灵活扩展功能，无需修改核心代码。
通过函数ID调用，便于管理和维护。

###8.2 心跳机制
特点：客户端和服务端支持心跳机制，用于检测连接状态。
优势：
自动检测连接异常，提升系统可靠性。
支持重连机制，确保网络中断后能够恢复。

###8.3 网络通信
特点：实现分块数据传输，支持大数据包的可靠传输。
优势：
避免数据包丢失或截断。
支持长连接和短连接模式，适应不同场景需求。

###8.4 自定义处理函数
特点：内置多个示例处理函数（如字符串反转、大小写转换等），并支持用户自定义处理逻辑。
优势：
开箱即用，快速上手。
用户可根据业务需求扩展功能。

###8.5 测试脚本
特点：提供自动化测试脚本，支持批量测试和性能统计。

优势：
自动验证功能正确性。
统计测试结果，包括错误率、响应时间等。


